expression = equality ;

equality = bool_op ( ( "=" | "!=" ) bool_op )* ;

bool_op = comparison ( ( "|" | "&" ) comparison )* ;

comparison = term ( ( "<" | "<=" | ">" | ">=" ) term )* ;

term = factor ( ( "-" | "+" ) factor )* ;

factor = unary ( ( "/" | "*" ) unary )* ;

unary = ( "!" | "-" ) unary | primary ;

primary = grouping | number | boolean | string ;

grouping = "(" expression ")" ;

number = integer | float ;

integer = octal | decimal | hexadecimal ;

float = ( "0." | decimal "." ) digit+ exponent? ;

exponent = ( "e" | "E" ) "-"? ( "0" | decimal )+ ;

octal = "0" octal_digit+ ;

octal_digit = "0" | non_zero_octal_digit ;

non_zero_octal_digit = "1" | "2" | "3" | "4" | "5" | "6" | "7" ;

decimal = "0" | non_zero_digit digit* ;

digit = "0" | non_zero_digit ;

non_zero_digit = octal_digit | "8" | "9" ;

hexadecimal = "#" hex_digit+ ;

hex_digit = "0" | non_zero_hex_digit ;

non_zero_hex_digit = digit | "A" | "a" | "B" | "b" | "C" | "c" | "D" | "d"
                   | "E" | "e" | "F" | "f" ;

boolean = "true" | "false" ;

string = '"' CHAR* '"'
       | "'" CHAR* "'"
       | "`" ( CHAR | "{" expression "}" )* "`" ;